---
import Layout from "../layouts/Layout.astro";
---

<Layout>
  <body class="bg-gray-50 min-h-screen">
    <div class="max-w-7xl mx-auto p-6">
      <!-- Header -->
      <div class="mb-8">
        <h1 class="text-3xl font-bold text-gray-900 mb-2">
          Reportes del sistema
        </h1>
        <p class="text-gray-600">Gestión de reportes diarios del restaurante</p>
      </div>

      <!-- Filtros -->
      <div class="bg-white rounded-lg shadow-sm border p-6 mb-6">
        <h2 class="text-lg font-semibold text-gray-900 mb-4">Filtros</h2>
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2"
              >Fecha</label
            >
            <input
              type="date"
              id="dateFilter"
              class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2"
              >Rango de Monto</label
            >
            <input
              type="number"
              id="minAmount"
              placeholder="Monto mínimo"
              class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <div class="flex items-end">
            <button
              onclick="applyFilters()"
              class="w-full bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors"
            >
              Aplicar Filtros
            </button>
          </div>
        </div>
      </div>

      <!-- Error/Success Messages -->
      <div
        id="errorMessage"
        class="hidden bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4"
      >
        <p id="errorText"></p>
      </div>

      <div
        id="successMessage"
        class="hidden bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4"
      >
        <p id="successText"></p>
      </div>

      <!-- Loading indicator -->
      <div id="loadingIndicator" class="text-center py-8 hidden">
        <div
          class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"
        >
        </div>
        <p class="mt-2 text-gray-600">Cargando datos...</p>
      </div>

      <!-- Métricas -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6">
        <div class="bg-white p-6 rounded-lg shadow-sm border">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm font-medium text-gray-600">Ventas Totales</p>
              <p class="text-2xl font-bold text-gray-900" id="totalSales">$0</p>
            </div>
            <div class="bg-green-100 p-3 rounded-full">
              <svg
                class="w-6 h-6 text-green-600"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"
                ></path>
              </svg>
            </div>
          </div>
        </div>

        <div class="bg-white p-6 rounded-lg shadow-sm border">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm font-medium text-gray-600">Órdenes</p>
              <p class="text-2xl font-bold text-gray-900" id="totalOrders">0</p>
            </div>
            <div class="bg-blue-100 p-3 rounded-full">
              <svg
                class="w-6 h-6 text-blue-600"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"
                ></path>
              </svg>
            </div>
          </div>
        </div>
      </div>

      <!-- Tabla de Órdenes -->
      <div class="bg-white rounded-lg shadow-sm border">
        <div class="px-6 py-4 border-b border-gray-200">
          <div class="flex justify-between items-center">
            <h3 class="text-lg font-semibold text-gray-900">Órdenes del Día</h3>
            <div class="flex space-x-2">
              <button
                onclick="resetFilters()"
                class="bg-gray-600 text-white px-4 py-2 rounded-md hover:bg-gray-700 transition-colors text-sm"
              >
                Limpiar Filtros
              </button>
              <button
                onclick="exportData()"
                class="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 transition-colors text-sm"
              >
                Exportar Excel
              </button>
              <button
                onclick="printReport()"
                class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors text-sm"
              >
                Imprimir
              </button>
            </div>
          </div>
        </div>

        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th
                  class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >ID</th
                >
                <th
                  class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >Fecha</th
                >
                <th
                  class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >Total</th
                >
                <th
                  class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >Acciones</th
                >
              </tr>
            </thead>
            <tbody id="ordersTable" class="bg-white divide-y divide-gray-200">
              <tr>
                <td colspan="4" class="px-6 py-4 text-center text-gray-500"
                  >No hay datos disponibles</td
                >
              </tr>
            </tbody>
          </table>
        </div>

        <!-- Paginación -->
        <div
          class="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6"
        >
          <div class="flex-1 flex justify-between sm:hidden">
            <button
              id="prevPageMobile"
              class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Anterior
            </button>
            <button
              id="nextPageMobile"
              class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Siguiente
            </button>
          </div>
          <div
            class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between"
          >
            <div>
              <p class="text-sm text-gray-700" id="paginationInfo">
                Mostrando 0 de 0 órdenes
              </p>
            </div>
            <div>
              <nav
                class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px"
                id="paginationControls"
              >
                <!-- Los controles de paginación se generan dinámicamente -->
              </nav>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Modal de confirmación -->
    <div
      id="deleteModal"
      class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden"
    >
      <div
        class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white"
      >
        <div class="mt-3 text-center">
          <div
            class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100"
          >
            <svg
              class="h-6 w-6 text-red-600"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"
              ></path>
            </svg>
          </div>
          <h3 class="text-lg leading-6 font-medium text-gray-900 mt-4">
            Confirmar eliminación
          </h3>
          <div class="mt-2 px-7 py-3">
            <p class="text-sm text-gray-500">
              ¿Estás seguro de que deseas eliminar esta orden? Esta acción no se
              puede deshacer.
            </p>
          </div>
          <div class="items-center px-4 py-3">
            <button
              id="confirmDelete"
              class="px-4 py-2 bg-red-500 text-white text-base font-medium rounded-md w-24 mr-2 hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-300"
            >
              Eliminar
            </button>
            <button
              onclick="closeDeleteModal()"
              class="px-4 py-2 bg-gray-500 text-white text-base font-medium rounded-md w-24 hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-gray-300"
            >
              Cancelar
            </button>
          </div>
        </div>
      </div>
    </div>

    <script>
      const API_URL = "/api/getOrders";

      // Variables globales
      let allOrders = [];
      let filteredOrders = [];
      let currentPage = 1;
      let orderToDelete = null;
      const pageSize = 10;

      // Elementos del DOM
      const loadingIndicator = document.getElementById("loadingIndicator");
      const totalSalesEl = document.getElementById("totalSales");
      const totalOrdersEl = document.getElementById("totalOrders");
      const ordersTable = document.getElementById("ordersTable");
      const paginationControls = document.getElementById("paginationControls");
      const paginationInfo = document.getElementById("paginationInfo");
      const prevPageBtn = document.getElementById("prevPageMobile");
      const nextPageBtn = document.getElementById("nextPageMobile");
      const errorMessage = document.getElementById("errorMessage");
      const successMessage = document.getElementById("successMessage");
      const deleteModal = document.getElementById("deleteModal");

      // Mostrar mensaje de error
      function showError(message) {
        document.getElementById("errorText").textContent = message;
        errorMessage.classList.remove("hidden");
        successMessage.classList.add("hidden");
        setTimeout(() => {
          errorMessage.classList.add("hidden");
        }, 5000);
      }

      // Mostrar mensaje de éxito
      function showSuccess(message) {
        document.getElementById("successText").textContent = message;
        successMessage.classList.remove("hidden");
        errorMessage.classList.add("hidden");
        setTimeout(() => {
          successMessage.classList.add("hidden");
        }, 5000);
      }

      // Paginación
      function paginate(array, page, pageSize) {
        const start = (page - 1) * pageSize;
        return array.slice(start, start + pageSize);
      }

      // Renderizar tabla
      function renderTable(page = 1) {
        const ordersToShow =
          filteredOrders.length > 0 ? filteredOrders : allOrders;
        const paginatedOrders = paginate(ordersToShow, page, pageSize);
        ordersTable.innerHTML = "";

        if (paginatedOrders.length === 0) {
          ordersTable.innerHTML = `
                    <tr>
                        <td colspan="4" class="px-6 py-4 text-center text-gray-500">No hay datos disponibles</td>
                    </tr>
                `;
        } else {
          paginatedOrders.forEach((order) => {
            const formattedDate = order.date
              ? new Date(order.date).toLocaleDateString("es-ES")
              : "N/A";
            const formattedTotal = order.total
              ? parseFloat(order.total).toFixed(2)
              : "0.00";

            const row = `
                        <tr>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${order.id || "N/A"}</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${formattedDate}</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">$${formattedTotal}</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                <button onclick="viewOrder(${order.id})" class="text-blue-600 hover:underline mr-3">Ver</button>
                                <button onclick="openDeleteModal(${order.id})" class="text-red-600 hover:underline">Eliminar</button>
                            </td>
                        </tr>
                    `;
            ordersTable.insertAdjacentHTML("beforeend", row);
          });
        }

        updatePaginationControls(ordersToShow);
        paginationInfo.textContent = `Mostrando ${paginatedOrders.length} de ${ordersToShow.length} órdenes`;
      }

      // Actualizar controles de paginación
      function updatePaginationControls(orders) {
        const totalPages = Math.ceil(orders.length / pageSize);
        paginationControls.innerHTML = "";

        if (totalPages <= 1) {
          prevPageBtn.disabled = true;
          nextPageBtn.disabled = true;
          return;
        }

        // Lógica para mostrar solo algunos números de página
        let startPage = Math.max(1, currentPage - 2);
        let endPage = Math.min(totalPages, currentPage + 2);

        // Ajustar si estamos cerca del inicio o final
        if (currentPage <= 3) {
          endPage = Math.min(5, totalPages);
        }
        if (currentPage >= totalPages - 2) {
          startPage = Math.max(1, totalPages - 4);
        }

        // Botón "Primera página"
        if (startPage > 1) {
          const firstBtn = document.createElement("button");
          firstBtn.textContent = "1";
          firstBtn.className =
            "relative inline-flex items-center px-4 py-2 border bg-white text-gray-700 border-gray-300 hover:bg-gray-50 text-sm font-medium";
          firstBtn.addEventListener("click", () => {
            currentPage = 1;
            renderTable(currentPage);
          });
          paginationControls.appendChild(firstBtn);

          if (startPage > 2) {
            const ellipsis = document.createElement("span");
            ellipsis.textContent = "...";
            ellipsis.className =
              "relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700";
            paginationControls.appendChild(ellipsis);
          }
        }

        // Páginas principales
        for (let i = startPage; i <= endPage; i++) {
          const btn = document.createElement("button");
          btn.textContent = i;
          btn.className =
            "relative inline-flex items-center px-4 py-2 border text-sm font-medium " +
            (i === currentPage
              ? "z-10 bg-blue-600 text-white border-blue-600"
              : "bg-white text-gray-700 border-gray-300 hover:bg-gray-50");
          btn.addEventListener("click", () => {
            currentPage = i;
            renderTable(currentPage);
          });
          paginationControls.appendChild(btn);
        }

        // Botón "Última página"
        if (endPage < totalPages) {
          if (endPage < totalPages - 1) {
            const ellipsis = document.createElement("span");
            ellipsis.textContent = "...";
            ellipsis.className =
              "relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700";
            paginationControls.appendChild(ellipsis);
          }

          const lastBtn = document.createElement("button");
          lastBtn.textContent = totalPages;
          lastBtn.className =
            "relative inline-flex items-center px-4 py-2 border bg-white text-gray-700 border-gray-300 hover:bg-gray-50 text-sm font-medium";
          lastBtn.addEventListener("click", () => {
            currentPage = totalPages;
            renderTable(currentPage);
          });
          paginationControls.appendChild(lastBtn);
        }

        // Actualizar botones móviles
        prevPageBtn.disabled = currentPage === 1;
        nextPageBtn.disabled = currentPage === totalPages;

        prevPageBtn.onclick = () => {
          if (currentPage > 1) {
            currentPage--;
            renderTable(currentPage);
          }
        };

        nextPageBtn.onclick = () => {
          if (currentPage < totalPages) {
            currentPage++;
            renderTable(currentPage);
          }
        };
      }

      // Obtener órdenes del servidor
      async function fetchOrders() {
        loadingIndicator.classList.remove("hidden");
        try {
          const response = await fetch(API_URL);
          if (!response.ok) {
            throw new Error(`Error ${response.status}: ${response.statusText}`);
          }

          const data = await response.json();

          if (!Array.isArray(data)) {
            throw new Error("Formato de datos inesperado");
          }

          allOrders = data;
          filteredOrders = [];

          // Calcular métricas
          const totalSales = allOrders.reduce(
            (sum, order) => sum + (parseFloat(order.total) || 0),
            0
          );
          const totalOrdersCount = allOrders.length;

          totalSalesEl.textContent = `$${totalSales.toFixed(2)}`;
          totalOrdersEl.textContent = totalOrdersCount;

          currentPage = 1;
          renderTable(currentPage);
        } catch (error) {
          console.error("Error al cargar los datos:", error);
          showError("Error al cargar los datos: " + error.message);
        } finally {
          loadingIndicator.classList.add("hidden");
        }
      }

      // Aplicar filtros
      function applyFilters() {
        const dateFilter = document.getElementById("dateFilter").value;
        const minAmount =
          parseFloat(document.getElementById("minAmount").value) || 0;

        if (!dateFilter && minAmount === 0) {
          filteredOrders = [];
          currentPage = 1;
          renderTable(currentPage);
          return;
        }

        filteredOrders = allOrders.filter((order) => {
          let matchesDate = true;
          let matchesAmount = true;

          if (dateFilter) {
            const orderDate = new Date(order.date).toISOString().split("T")[0];
            matchesDate = orderDate === dateFilter;
          }

          if (minAmount > 0) {
            const orderTotal = parseFloat(order.total) || 0;
            matchesAmount = orderTotal >= minAmount;
          }

          return matchesDate && matchesAmount;
        });

        currentPage = 1;
        renderTable(currentPage);
      }

      // Limpiar filtros
      function resetFilters() {
        document.getElementById("dateFilter").value = "";
        document.getElementById("minAmount").value = "";
        filteredOrders = [];
        currentPage = 1;
        renderTable(currentPage);
      }

      // Abrir modal de eliminación
      function openDeleteModal(orderId) {
        orderToDelete = orderId;
        deleteModal.classList.remove("hidden");
      }

      // Cerrar modal de eliminación
      function closeDeleteModal() {
        orderToDelete = null;
        deleteModal.classList.add("hidden");
      }

      // Eliminar orden
      async function deleteOrder() {
        if (!orderToDelete) return;

        try {
          const response = await fetch(`${API_URL}?id=${orderToDelete}`, {
            method: "DELETE",
          });

          const result = await response.json();

          if (!response.ok) {
            throw new Error(result.error || "Error al eliminar la orden");
          }

          showSuccess("Orden eliminada correctamente");
          closeDeleteModal();
          await fetchOrders(); // Recargar datos
        } catch (error) {
          console.error("Error al eliminar la orden:", error);
          showError("Error al eliminar la orden: " + error.message);
        }
      }

      // Ver orden (placeholder)
      function viewOrder(orderId) {
        alert(
          `Ver detalles de la orden ${orderId} - Funcionalidad pendiente de implementar`
        );
      }

      // Exportar datos (placeholder)
      function exportData() {
        alert("Funcionalidad de exportar aún no implementada.");
      }

      // Imprimir reporte
      function printReport() {
        window.print();
      }

      // Event listeners
      document.getElementById("confirmDelete").onclick = deleteOrder;

      // Cerrar modal con Escape
      document.addEventListener("keydown", function (event) {
        if (event.key === "Escape") {
          closeDeleteModal();
        }
      });

      // Cerrar modal clickeando fuera
      deleteModal.addEventListener("click", function (event) {
        if (event.target === deleteModal) {
          closeDeleteModal();
        }
      });

      // Inicialización
      fetchOrders();
    </script>
  </body>
</Layout>

---
import Layout from "../layouts/Layout.astro";
---

<Layout>
  <div
    class="min-h-screen bg-gradient-to-br from-slate-800 via-slate-900 to-slate-950 text-white p-4 font-sans"
  >
    <!-- Header con estadísticas -->
    <div class="max-w-7xl mx-auto">
      <div class="text-center mb-8">
        <h1
          class="text-4xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-orange-400 to-orange-600 mb-2"
        >
          💰 CONTROL DE GASTOS
        </h1>
        <p class="text-slate-400">Gestiona tus gastos de manera eficiente</p>
      </div>

      <!-- Estadísticas -->
      <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
        <div
          class="bg-gradient-to-r from-blue-600 to-blue-700 p-4 rounded-lg shadow-lg"
        >
          <div class="text-blue-200 text-sm">Total Gastos</div>
          <div id="total-gastos" class="text-2xl font-bold">$0</div>
        </div>
        <div
          class="bg-gradient-to-r from-green-600 to-green-700 p-4 rounded-lg shadow-lg"
        >
          <div class="text-green-200 text-sm">Este Mes</div>
          <div id="gastos-mes" class="text-2xl font-bold">$0</div>
        </div>
        <div
          class="bg-gradient-to-r from-purple-600 to-purple-700 p-4 rounded-lg shadow-lg"
        >
          <div class="text-purple-200 text-sm">Promedio Diario</div>
          <div id="promedio-diario" class="text-2xl font-bold">$0</div>
        </div>
        <div
          class="bg-gradient-to-r from-orange-600 to-orange-700 p-4 rounded-lg shadow-lg"
        >
          <div class="text-orange-200 text-sm">Total Registros</div>
          <div id="total-registros" class="text-2xl font-bold">0</div>
        </div>
      </div>

      <!-- Formulario mejorado -->
      <div
        class="bg-slate-800/50 backdrop-blur-sm p-6 rounded-xl shadow-2xl border border-slate-700 mb-8"
      >
        <h2 class="text-xl font-semibold mb-4 text-orange-400">
          ➕ Nuevo Gasto
        </h2>

        <form
          id="form-gastos"
          class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-6 gap-4"
        >
          <div class="lg:col-span-1">
            <label class="block text-sm font-medium text-slate-300 mb-2"
              >📅 Fecha</label
            >
            <input
              id="fecha"
              type="date"
              class="w-full p-3 rounded-lg bg-slate-700 border border-slate-600 text-white focus:border-orange-500 focus:ring-2 focus:ring-orange-500/20 transition-all"
              required
            />
          </div>

          <div class="lg:col-span-2">
            <label class="block text-sm font-medium text-slate-300 mb-2"
              >🏷️ Tipo de Gasto</label
            >
            <select
              id="tipo"
              class="w-full p-3 rounded-lg bg-slate-700 border border-slate-600 text-white focus:border-orange-500 focus:ring-2 focus:ring-orange-500/20 transition-all"
              required
            >
              <option value="">Seleccione tipo</option>
              <option value="AREPAS COMIDA">Arepas / Comida</option>
              <option value="TURNOS CAJERO">Turnos Cajero</option>
              <option value="Turnos cocina">Turnos cocina</option>
              <option value="SERVICIOS">Servicios Públicos</option>
              <option value="Turnos Mesero">Turnos Mesero</option>
              <option value="DOMICILIO">DOMICILIO</option>
              <option value="PAN">PAN</option>
              <option value="LAVADO PLATOS">LAVADO PLATOS</option>
            </select>
          </div>

          <div class="lg:col-span-1">
            <label class="block text-sm font-medium text-slate-300 mb-2"
              >💵 Valor</label
            >
            <input
              id="valor"
              type="number"
              min="0"
              step="0.01"
              placeholder="0.00"
              class="w-full p-3 rounded-lg bg-slate-700 border border-slate-600 text-white focus:border-orange-500 focus:ring-2 focus:ring-orange-500/20 transition-all"
              required
            />
          </div>

          <div class="lg:col-span-1">
            <label class="block text-sm font-medium text-slate-300 mb-2"
              >📝 Detalle</label
            >
            <input
              id="detalle"
              type="text"
              placeholder="Descripción..."
              class="w-full p-3 rounded-lg bg-slate-700 border border-slate-600 text-white focus:border-orange-500 focus:ring-2 focus:ring-orange-500/20 transition-all"
            />
          </div>

          <div class="lg:col-span-1">
            <label class="block text-sm font-medium text-slate-300 mb-2"
              >💳 Forma de Pago</label
            >
            <select
              id="forma_pago"
              class="w-full p-3 rounded-lg bg-slate-700 border border-slate-600 text-white focus:border-orange-500 focus:ring-2 focus:ring-orange-500/20 transition-all"
              required
            >
              <option value="">Seleccione</option>
              <option value="Efectivo">💵 Efectivo</option>
              <option value="Tarjeta Débito">💳 Tarjeta Débito</option>
              <option value="Tarjeta Crédito">💰 Tarjeta Crédito</option>
              <option value="Transferencia">🏦 Transferencia</option>
              <option value="Contado Caja Pos">📱 POS</option>
            </select>
          </div>

          <div class="lg:col-span-6 flex gap-4 justify-center mt-4">
            <button
              type="submit"
              class="bg-gradient-to-r from-orange-500 to-orange-600 text-white px-8 py-3 rounded-lg hover:from-orange-600 hover:to-orange-700 transition-all transform hover:scale-105 shadow-lg font-medium"
            >
              ✅ Guardar Gasto
            </button>
            <button
              type="button"
              id="btn-limpiar"
              class="bg-gradient-to-r from-slate-600 to-slate-700 text-white px-8 py-3 rounded-lg hover:from-slate-700 hover:to-slate-800 transition-all transform hover:scale-105 shadow-lg font-medium"
            >
              🗑️ Limpiar
            </button>
          </div>
        </form>
      </div>

      <!-- Filtros y búsqueda -->
      <div
        class="bg-slate-800/50 backdrop-blur-sm p-4 rounded-xl shadow-lg border border-slate-700 mb-6"
      >
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div>
            <label class="block text-sm font-medium text-slate-300 mb-2"
              >🔍 Buscar</label
            >
            <input
              id="buscar"
              type="text"
              placeholder="Buscar gastos..."
              class="w-full p-2 rounded-lg bg-slate-700 border border-slate-600 text-white focus:border-orange-500 transition-all"
            />
          </div>
          <div>
            <label class="block text-sm font-medium text-slate-300 mb-2"
              >📅 Desde</label
            >
            <input
              id="fecha-desde"
              type="date"
              class="w-full p-2 rounded-lg bg-slate-700 border border-slate-600 text-white focus:border-orange-500 transition-all"
            />
          </div>
          <div>
            <label class="block text-sm font-medium text-slate-300 mb-2"
              >📅 Hasta</label
            >
            <input
              id="fecha-hasta"
              type="date"
              class="w-full p-2 rounded-lg bg-slate-700 border border-slate-600 text-white focus:border-orange-500 transition-all"
            />
          </div>
          <div class="flex items-end">
            <button
              id="btn-filtrar"
              class="w-full bg-gradient-to-r from-blue-500 to-blue-600 text-white px-4 py-2 rounded-lg hover:from-blue-600 hover:to-blue-700 transition-all"
            >
              🔍 Filtrar
            </button>
          </div>
        </div>
      </div>

      <!-- Tabla mejorada -->
      <div
        class="bg-slate-800/50 backdrop-blur-sm rounded-xl shadow-2xl border border-slate-700 overflow-hidden"
      >
        <div
          class="p-4 border-b border-slate-700 flex justify-between items-center"
        >
          <h2 class="text-xl font-semibold text-orange-400">
            📊 Lista de Gastos
          </h2>
          <button
            id="btn-exportar"
            class="bg-gradient-to-r from-green-500 to-green-600 text-white px-4 py-2 rounded-lg hover:from-green-600 hover:to-green-700 transition-all text-sm"
          >
            📥 Exportar CSV
          </button>
        </div>

        <div class="overflow-x-auto">
          <table class="w-full">
            <thead class="bg-slate-900">
              <tr>
                <th
                  class="px-4 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider"
                  >Código</th
                >
                <th
                  class="px-4 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider"
                  >Tipo</th
                >
                <th
                  class="px-4 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider"
                  >Fecha</th
                >
                <th
                  class="px-4 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider"
                  >Valor</th
                >
                <th
                  class="px-4 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider"
                  >Detalle</th
                >
                <th
                  class="px-4 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider"
                  >Pago</th
                >
                <th
                  class="px-4 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider"
                  >Usuario</th
                >
                <th
                  class="px-4 py-3 text-center text-xs font-medium text-slate-300 uppercase tracking-wider"
                  >Acciones</th
                >
              </tr>
            </thead>
            <tbody id="gastos-body" class="divide-y divide-slate-600">
              <!-- Las filas se insertarán dinámicamente -->
            </tbody>
          </table>

          <!-- Estado vacío -->
          <div id="estado-vacio" class="hidden text-center py-12">
            <div class="text-slate-400 text-6xl mb-4">📊</div>
            <h3 class="text-xl font-medium text-slate-300 mb-2">
              No hay gastos registrados
            </h3>
            <p class="text-slate-400">
              Agrega tu primer gasto usando el formulario de arriba
            </p>
          </div>

          <!-- Loading -->
          <div id="loading" class="hidden text-center py-12">
            <div
              class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500"
            >
            </div>
            <p class="text-slate-400 mt-2">Cargando gastos...</p>
          </div>
        </div>
      </div>
    </div>

    <!-- Toast notifications -->
    <div id="toast-container" class="fixed top-4 right-4 space-y-2 z-50"></div>
  </div>

  <script type="module">
    // Variables globales
    let gastosData = [];
    let gastosOriginales = [];
    let isLoading = false;

    // Constantes
    const API_BASE_URL = "/api/gastos";

    // Utilidades
    function formatearMoneda(valor) {
      return new Intl.NumberFormat("es-CO", {
        style: "currency",
        currency: "COP",
        minimumFractionDigits: 0,
      }).format(valor);
    }

    function formatearFecha(fecha) {
      return new Date(fecha).toLocaleDateString("es-CO", {
        year: "numeric",
        month: "2-digit",
        day: "2-digit",
      });
    }

    function mostrarToast(mensaje, tipo = "success") {
      console.log(`[TOAST ${tipo.toUpperCase()}]: ${mensaje}`);

      const toast = document.createElement("div");
      const colores = {
        success: "bg-green-500",
        error: "bg-red-500",
        warning: "bg-yellow-500",
        info: "bg-blue-500",
      };

      toast.className = `${colores[tipo]} text-white px-6 py-3 rounded-lg shadow-lg transform translate-x-full transition-transform duration-300 fixed top-4 right-4 z-50`;
      toast.textContent = mensaje;

      // Asegurar que el contenedor existe
      let toastContainer = document.getElementById("toast-container");
      if (!toastContainer) {
        toastContainer = document.createElement("div");
        toastContainer.id = "toast-container";
        toastContainer.className = "fixed top-4 right-4 z-50 space-y-2";
        document.body.appendChild(toastContainer);
      }

      toastContainer.appendChild(toast);

      setTimeout(() => toast.classList.remove("translate-x-full"), 100);
      setTimeout(() => {
        toast.classList.add("translate-x-full");
        setTimeout(() => toast.remove(), 300);
      }, 3000);
    }

    function mostrarLoading(mostrar) {
      const loading = document.getElementById("loading");
      const tbody = document.getElementById("gastos-body");
      const estadoVacio = document.getElementById("estado-vacio");

      if (mostrar) {
        loading?.classList.remove("hidden");
        tbody?.classList.add("hidden");
        estadoVacio?.classList.add("hidden");
        isLoading = true;
      } else {
        loading?.classList.add("hidden");
        tbody?.classList.remove("hidden");
        isLoading = false;
      }
    }

    function actualizarEstadisticas() {
      try {
        const total = gastosData.reduce(
          (sum, gasto) => sum + (gasto.valor || 0),
          0
        );
        const fechaActual = new Date();
        const gastosMes = gastosData.filter((gasto) => {
          const fechaGasto = new Date(gasto.fecha);
          return (
            fechaGasto.getMonth() === fechaActual.getMonth() &&
            fechaGasto.getFullYear() === fechaActual.getFullYear()
          );
        });
        const totalMes = gastosMes.reduce(
          (sum, gasto) => sum + (gasto.valor || 0),
          0
        );

        const diasTranscurridos = fechaActual.getDate();
        const promedioDiario = totalMes / diasTranscurridos;

        // Actualizar elementos con verificación de existencia
        const totalGastosEl = document.getElementById("total-gastos");
        const gastosMesEl = document.getElementById("gastos-mes");
        const promedioDiarioEl = document.getElementById("promedio-diario");
        const totalRegistrosEl = document.getElementById("total-registros");

        if (totalGastosEl) totalGastosEl.textContent = formatearMoneda(total);
        if (gastosMesEl) gastosMesEl.textContent = formatearMoneda(totalMes);
        if (promedioDiarioEl)
          promedioDiarioEl.textContent = formatearMoneda(promedioDiario);
        if (totalRegistrosEl) totalRegistrosEl.textContent = gastosData.length;

        console.log(
          `[STATS] Total: ${formatearMoneda(total)}, Mes: ${formatearMoneda(totalMes)}, Registros: ${gastosData.length}`
        );
      } catch (error) {
        console.error("Error actualizando estadísticas:", error);
      }
    }

    // MEJORA PARA makeApiRequest - Agregar más logging
    async function makeApiRequest(url, options = {}) {
      console.log(`[API] ${options.method || "GET"} ${url}`);

      // Log del body antes de enviarlo
      if (options.body) {
        console.log(`[API] Request body (string):`, options.body);
        try {
          const parsedBody = JSON.parse(options.body);
          console.log(`[API] Request body (parsed):`, parsedBody);

          // Verificar si hay valores problemáticos
          for (const [key, value] of Object.entries(parsedBody)) {
            if (typeof value === "number" && isNaN(value)) {
              console.error(`[API] ⚠️  Valor NaN detectado en ${key}:`, value);
            }
            if (value === undefined) {
              console.error(`[API] ⚠️  Valor undefined detectado en ${key}`);
            }
          }
        } catch (e) {
          console.error(`[API] ⚠️  Body no es JSON válido:`, e.message);
        }
      }

      try {
        const response = await fetch(url, {
          headers: {
            "Content-Type": "application/json",
            ...options.headers,
          },
          ...options,
        });

        console.log(`[API] Response status: ${response.status}`);
        console.log(`[API] Response headers:`, [...response.headers.entries()]);

        let data;
        const contentType = response.headers.get("content-type");

        if (contentType && contentType.includes("application/json")) {
          const responseText = await response.text();
          console.log(`[API] Raw response text:`, responseText);

          try {
            data = JSON.parse(responseText);
            console.log(`[API] Parsed response data:`, data);
          } catch (parseError) {
            console.error(`[API] Error parsing JSON response:`, parseError);
            console.error(
              `[API] Response text that failed to parse:`,
              responseText
            );
            throw new Error(
              `Respuesta JSON inválida del servidor: ${parseError.message}`
            );
          }
        } else {
          const text = await response.text();
          console.log(`[API] Non-JSON response:`, text);
          throw new Error(`Respuesta no JSON del servidor: ${text}`);
        }

        if (!response.ok) {
          console.error(`[API] Error response:`, data);
          throw new Error(data.error || `Error HTTP: ${response.status}`);
        }

        return { success: true, data, status: response.status };
      } catch (error) {
        console.error(`[API] Error:`, error);
        return { success: false, error: error.message };
      }
    }

    async function cargarGastos() {
      if (isLoading) {
        console.log("[LOAD] Ya hay una carga en progreso");
        return;
      }

      try {
        console.log("[LOAD] Iniciando carga de gastos...");
        mostrarLoading(true);

        const result = await makeApiRequest(API_BASE_URL);

        if (!result.success) {
          throw new Error(result.error);
        }

        // CORRECCIÓN: Manejo mejorado de la respuesta de la API
        let data;
        console.log("[LOAD] Estructura de respuesta:", result.data);

        if (result.data.success && result.data.data) {
          // Formato de la API mejorada
          data = result.data.data;
        } else if (Array.isArray(result.data)) {
          // Si la respuesta es directamente un array
          data = result.data;
        } else if (result.data.data && Array.isArray(result.data.data)) {
          // Si hay una propiedad data que es un array
          data = result.data.data;
        } else {
          console.error(
            "[LOAD] Formato de respuesta desconocido:",
            result.data
          );
          throw new Error("Formato de respuesta no reconocido");
        }

        console.log(`[LOAD] Gastos cargados: ${data.length} registros`);
        gastosData = data;
        gastosOriginales = [...data];
        renderizarTabla(data);
        actualizarEstadisticas();
      } catch (error) {
        console.error("[LOAD] Error cargando gastos:", error);
        mostrarToast(`Error al cargar los gastos: ${error.message}`, "error");
        mostrarEstadoVacio();
      } finally {
        mostrarLoading(false);
      }
    }

    function mostrarEstadoVacio() {
      const tbody = document.getElementById("gastos-body");
      const estadoVacio = document.getElementById("estado-vacio");

      if (tbody) {
        tbody.innerHTML = "";
        tbody.classList.add("hidden");
      }
      estadoVacio?.classList.remove("hidden");
    }

    function renderizarTabla(gastos) {
      const tbody = document.getElementById("gastos-body");
      const estadoVacio = document.getElementById("estado-vacio");

      if (!tbody) {
        console.error("No se encontró el elemento gastos-body");
        return;
      }

      if (gastos.length === 0) {
        mostrarEstadoVacio();
        return;
      }

      tbody.classList.remove("hidden");
      estadoVacio?.classList.add("hidden");
      tbody.innerHTML = "";

      gastos.forEach((gasto, index) => {
        const fila = document.createElement("tr");
        fila.className = `${index % 2 === 0 ? "bg-slate-700/50" : "bg-slate-800/50"} hover:bg-slate-600/50 transition-colors`;

        fila.innerHTML = `
          <td class="px-4 py-3 whitespace-nowrap text-sm text-slate-300">#${gasto.id}</td>
          <td class="px-4 py-3 whitespace-nowrap">
            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-orange-100 text-orange-800">
              ${gasto.tipo}
            </span>
          </td>
          <td class="px-4 py-3 whitespace-nowrap text-sm text-slate-300">${formatearFecha(gasto.fecha)}</td>
          <td class="px-4 py-3 whitespace-nowrap text-sm font-medium text-green-400">${formatearMoneda(gasto.valor)}</td>
          <td class="px-4 py-3 text-sm text-slate-300 max-w-xs truncate" title="${gasto.detalle || "Sin detalle"}">${gasto.detalle || "-"}</td>
          <td class="px-4 py-3 whitespace-nowrap text-sm text-slate-300">${gasto.forma_pago}</td>
          <td class="px-4 py-3 whitespace-nowrap text-sm text-slate-300">${gasto.usuario || "admin"}</td>
          <td class="px-4 py-3 whitespace-nowrap text-center">
            <button 
              class="text-red-400 hover:text-red-300 hover:bg-red-500/20 p-2 rounded-lg transition-all transform hover:scale-110 eliminar-btn" 
              data-id="${gasto.id}"
              data-tipo="${gasto.tipo}"
              data-valor="${gasto.valor}"
              title="Eliminar gasto"
            >
              🗑️
            </button>
          </td>
        `;
        tbody.appendChild(fila);
      });

      // Añadir eventos a botones eliminar
      document.querySelectorAll(".eliminar-btn").forEach((btn) => {
        btn.addEventListener("click", eliminarGasto);
      });

      console.log(`[RENDER] Tabla renderizada con ${gastos.length} filas`);
    }

    // FUNCIÓN CORREGIDA: eliminarGasto
    async function eliminarGasto(e) {
      const id = e.target.dataset.id;
      const tipo = e.target.dataset.tipo;
      const valor = parseFloat(e.target.dataset.valor);

      console.log(`[DELETE] Intentando eliminar gasto ID: ${id}`);

      if (!id) {
        mostrarToast("Error: ID de gasto no válido", "error");
        return;
      }

      if (
        !confirm(
          `¿Está seguro de eliminar el gasto "${tipo}" por ${formatearMoneda(valor)}?`
        )
      ) {
        console.log("[DELETE] Eliminación cancelada por el usuario");
        return;
      }

      try {
        // CORRECCIÓN: Cambiar el método de envío para DELETE
        const deleteUrl = `${API_BASE_URL}?id=${id}`;
        console.log(`[DELETE] URL: ${deleteUrl}`);

        const result = await makeApiRequest(deleteUrl, {
          method: "DELETE",
          // Enviar ID en el body también por si acaso
          body: JSON.stringify({ id: parseInt(id) }),
        });

        if (!result.success) {
          throw new Error(result.error);
        }

        console.log("[DELETE] Respuesta completa:", result.data);

        // CORRECCIÓN: Verificar el éxito de la operación
        if (result.data.success) {
          mostrarToast("Gasto eliminado correctamente");
          console.log(`[DELETE] Gasto ${id} eliminado exitosamente`);
          await cargarGastos(); // Recargar la lista
        } else {
          throw new Error(
            result.data.error || "Error en la respuesta del servidor"
          );
        }
      } catch (error) {
        console.error("[DELETE] Error eliminando gasto:", error);
        mostrarToast(`Error al eliminar el gasto: ${error.message}`, "error");
      }
    }

    // MEJORAS PARA LA FUNCIÓN guardarGasto
    async function guardarGasto(formData) {
      console.log("[SAVE] Iniciando guardado de gasto:", formData);

      // VALIDACIÓN Y LIMPIEZA MEJORADA
      const valor = parseFloat(formData.valor);

      // Validar que valor no sea NaN
      if (isNaN(valor) || valor <= 0) {
        throw new Error("El valor debe ser un número válido mayor a cero");
      }

      // Validar fecha
      if (!formData.fecha || isNaN(new Date(formData.fecha))) {
        throw new Error("La fecha proporcionada no es válida");
      }

      const dataToSend = {
        fecha: formData.fecha,
        tipo: String(formData.tipo || "").trim(),
        valor: Number(valor.toFixed(2)), // Asegurar que es número con 2 decimales
        detalle: formData.detalle ? String(formData.detalle).trim() : "",
        forma_pago: String(formData.forma_pago || "").trim(),
        usuario: String(formData.usuario || "admin").trim(),
      };

      // Validaciones adicionales
      if (!dataToSend.tipo) throw new Error("El tipo de gasto es requerido");
      if (!dataToSend.forma_pago)
        throw new Error("La forma de pago es requerida");

      console.log("[SAVE] Datos validados a enviar:", dataToSend);

      // Verificar que el JSON es serializable antes de enviarlo
      try {
        JSON.stringify(dataToSend);
      } catch (jsonError) {
        console.error("[SAVE] Error serializando JSON:", jsonError);
        throw new Error("Los datos contienen caracteres no válidos");
      }

      try {
        const result = await makeApiRequest(API_BASE_URL, {
          method: "POST",
          body: JSON.stringify(dataToSend),
        });

        if (!result.success) {
          throw new Error(result.error);
        }

        console.log("[SAVE] Respuesta completa:", result.data);

        if (result.data.success) {
          mostrarToast("Gasto guardado correctamente");
          console.log("[SAVE] Gasto guardado exitosamente:", result.data.data);
          return { success: true };
        } else {
          if (result.data.details && Array.isArray(result.data.details)) {
            throw new Error(result.data.details.join(", "));
          } else {
            throw new Error(
              result.data.error || "Error en la respuesta del servidor"
            );
          }
        }
      } catch (error) {
        console.error("[SAVE] Error guardando gasto:", error);
        throw error;
      }
    }

    function filtrarGastos() {
      const buscar =
        document.getElementById("buscar")?.value.toLowerCase() || "";
      const fechaDesde = document.getElementById("fecha-desde")?.value || "";
      const fechaHasta = document.getElementById("fecha-hasta")?.value || "";

      console.log(
        `[FILTER] Filtros aplicados: buscar="${buscar}", desde="${fechaDesde}", hasta="${fechaHasta}"`
      );

      let gastosFiltrados = [...gastosOriginales];

      if (buscar) {
        gastosFiltrados = gastosFiltrados.filter(
          (gasto) =>
            gasto.tipo.toLowerCase().includes(buscar) ||
            gasto.detalle?.toLowerCase().includes(buscar) ||
            gasto.forma_pago.toLowerCase().includes(buscar)
        );
      }

      if (fechaDesde) {
        gastosFiltrados = gastosFiltrados.filter(
          (gasto) => new Date(gasto.fecha) >= new Date(fechaDesde)
        );
      }

      if (fechaHasta) {
        gastosFiltrados = gastosFiltrados.filter(
          (gasto) => new Date(gasto.fecha) <= new Date(fechaHasta)
        );
      }

      gastosData = gastosFiltrados;
      renderizarTabla(gastosFiltrados);
      actualizarEstadisticas();

      console.log(
        `[FILTER] Resultados: ${gastosFiltrados.length} de ${gastosOriginales.length} gastos`
      );
    }

    function exportarCSV() {
      if (gastosData.length === 0) {
        mostrarToast("No hay datos para exportar", "warning");
        return;
      }

      try {
        const headers = [
          "ID",
          "Tipo",
          "Fecha",
          "Valor",
          "Detalle",
          "Forma de Pago",
          "Usuario",
        ];
        const csvContent = [
          headers.join(","),
          ...gastosData.map((gasto) =>
            [
              gasto.id,
              `"${gasto.tipo}"`,
              formatearFecha(gasto.fecha),
              gasto.valor,
              `"${gasto.detalle || ""}"`,
              `"${gasto.forma_pago}"`,
              `"${gasto.usuario || ""}"`,
            ].join(",")
          ),
        ].join("\n");

        const blob = new Blob([csvContent], {
          type: "text/csv;charset=utf-8;",
        });
        const link = document.createElement("a");
        const url = URL.createObjectURL(blob);
        link.setAttribute("href", url);
        link.setAttribute(
          "download",
          `gastos_${new Date().toISOString().split("T")[0]}.csv`
        );
        link.style.visibility = "hidden";
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);

        mostrarToast("Archivo CSV descargado");
        console.log(
          `[EXPORT] CSV exportado con ${gastosData.length} registros`
        );
      } catch (error) {
        console.error("[EXPORT] Error exportando CSV:", error);
        mostrarToast("Error al exportar CSV", "error");
      }
    }

    // Event listeners
    function inicializarEventListeners() {
      // VALIDACIÓN MEJORADA EN EL FORMULARIO
      const formGastos = document.getElementById("form-gastos");
      if (formGastos) {
        formGastos.addEventListener("submit", async (e) => {
          e.preventDefault();

          // Obtener valores con validación
          const fechaEl = e.target.querySelector("#fecha");
          const tipoEl = e.target.querySelector("#tipo");
          const valorEl = e.target.querySelector("#valor");
          const detalleEl = e.target.querySelector("#detalle");
          const formaPagoEl = e.target.querySelector("#forma_pago");

          const formData = {
            fecha: fechaEl?.value?.trim() || "",
            tipo: tipoEl?.value?.trim() || "",
            valor: valorEl?.value?.trim() || "0",
            detalle: detalleEl?.value?.trim() || "",
            forma_pago: formaPagoEl?.value?.trim() || "",
            usuario: "admin",
          };

          console.log("[FORM] Datos del formulario (RAW):", formData);

          // Validaciones en el cliente
          const errores = [];

          if (!formData.fecha) {
            errores.push("La fecha es requerida");
          } else if (isNaN(new Date(formData.fecha))) {
            errores.push("La fecha no es válida");
          }

          if (!formData.tipo) {
            errores.push("El tipo de gasto es requerido");
          }

          const valorNumerico = parseFloat(formData.valor);
          if (isNaN(valorNumerico) || valorNumerico <= 0) {
            errores.push("El valor debe ser un número mayor a cero");
            console.error(
              "[FORM] Valor inválido:",
              formData.valor,
              "-> parseFloat:",
              valorNumerico
            );
          }

          if (!formData.forma_pago) {
            errores.push("La forma de pago es requerida");
          }

          if (errores.length > 0) {
            mostrarToast(errores.join(", "), "warning");
            return;
          }

          try {
            await guardarGasto(formData);
            e.target.reset();
            const fechaInput = document.getElementById("fecha");
            if (fechaInput) fechaInput.valueAsDate = new Date();
            await cargarGastos();
          } catch (error) {
            console.error("[FORM] Error en submit:", error);
            mostrarToast(error.message || "Error al guardar el gasto", "error");
          }
        });
      }

      // Botón limpiar
      const btnLimpiar = document.getElementById("btn-limpiar");
      if (btnLimpiar) {
        btnLimpiar.addEventListener("click", () => {
          const form = document.getElementById("form-gastos");
          if (form) {
            form.reset();
            // Restablecer fecha actual
            const fechaInput = document.getElementById("fecha");
            if (fechaInput) fechaInput.valueAsDate = new Date();
          }
        });
      }

      // Filtros
      const btnFiltrar = document.getElementById("btn-filtrar");
      if (btnFiltrar) {
        btnFiltrar.addEventListener("click", filtrarGastos);
      }

      const buscarInput = document.getElementById("buscar");
      if (buscarInput) {
        buscarInput.addEventListener("input", filtrarGastos);
      }

      // Exportar
      const btnExportar = document.getElementById("btn-exportar");
      if (btnExportar) {
        btnExportar.addEventListener("click", exportarCSV);
      }

      console.log("[INIT] Event listeners inicializados");
    }

    // Inicialización
    function inicializar() {
      console.log("[INIT] Inicializando aplicación...");

      // Establecer fecha actual por defecto
      const fechaInput = document.getElementById("fecha");
      if (fechaInput) {
        fechaInput.valueAsDate = new Date();
      }

      // Inicializar event listeners
      inicializarEventListeners();

      // Cargar gastos al inicio
      cargarGastos();

      console.log("[INIT] Aplicación inicializada");
    }

    // Esperar a que el DOM esté listo
    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", inicializar);
    } else {
      inicializar();
    }

    // AGREGAR: Función de debugging manual para probar la API
    window.debugAPI = {
      async testPost() {
        const testData = {
          fecha: "2024-06-10",
          tipo: "AREPAS COMIDA",
          valor: 15000,
          detalle: "Test desde consola",
          forma_pago: "Efectivo",
          usuario: "admin",
        };

        console.log("Testing POST with data:", testData);
        try {
          const result = await makeApiRequest(API_BASE_URL, {
            method: "POST",
            body: JSON.stringify(testData),
          });
          console.log("POST Result:", result);
        } catch (error) {
          console.error("POST Error:", error);
        }
      },

      async testDelete(id) {
        console.log("Testing DELETE with ID:", id);
        try {
          const result = await makeApiRequest(`${API_BASE_URL}?id=${id}`, {
            method: "DELETE",
            body: JSON.stringify({ id: parseInt(id) }),
          });
          console.log("DELETE Result:", result);
        } catch (error) {
          console.error("DELETE Error:", error);
        }
      },

      async testGet() {
        console.log("Testing GET");
        try {
          const result = await makeApiRequest(API_BASE_URL);
          console.log("GET Result:", result);
        } catch (error) {
          console.error("GET Error:", error);
        }
      },
    };

    console.log("🔧 Debug functions available in window.debugAPI");
    console.log(
      "Use: window.debugAPI.testPost(), window.debugAPI.testGet(), window.debugAPI.testDelete(id)"
    );
  </script>
</Layout>
